generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  phone          String?
  password       String
  tradingAmount  String?
  referralId     String?
  experience     String?
  role           String   @default("user") // Can be "user" or "admin"
  myReferralCode      String   @unique @default(uuid()) 
  referredUsers       User[]    @relation("UserReferrals", fields: [], references: [])
  referredBy          User?     @relation("UserReferrals", fields: [referralId], references: [myReferralCode])

  activations   BotActivation[] 
  subscriptions Subscription[]
  pendingPayments PendingPayment[]
  transactions Transaction[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model Bot {
  id          String   @id @default(uuid())
  name        String
  description String
  tier        String
  minAmount   String
  performance String
  fee         String
  imageUrl    String?
  bgColor     String   @default("bg-white")
  stats       Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  activations BotActivation[] 
}


model BotActivation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  botId     String
  active    Boolean  @default(true)
  startedAt DateTime @default(now())

  @@unique([userId, botId])
}


model Subscription {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  plan       String
  active     Boolean  @default(true)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}


model PendingPayment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  plan      String
  amount    String
  status    String   @default("pending") // 'pending', 'approved', 'rejected'
  evidence  String   // file path or URL
  createdAt DateTime @default(now())
}

model Transaction {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  plan       String
  amount     Int
  reference  String   @unique
  status     String   @default("initialized") // initialized, success, failed
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}



model Webinar {
  id        String   @id @default(cuid())
  title     String
  thumbnail String
  duration  String
  videoUrl  String
  createdAt DateTime @default(now())
}


model Resource {
  id        String           @id @default(uuid())
  title     String
  fileUrl   String
  thumbnailUrl String
  category  ResourceCategory
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ResourceCategory {
  LEARN_WITH_US
  FOREX_SIGNAL
}
